#! /bin/bash

#========================
check_configuration(){
  if [ -z ${HOST_LIST} ]; then
     HOST_LIST="localhost";
  fi
  if [ -z ${DAYS_KEEP_LOG} ]; then
     show_message_log VAR_NOT_SET "DAYS_KEEP_LOG"
     exit 1;
  fi
  if [ -z ${DAYS_KEEP_ARC} ]; then
     show_message_log VAR_NOT_SET "DAYS_KEEP_ARC"
     exit 1;
  fi
  if [ -z ${MYSQLDUMP} ]; then
     show_message_log VAR_NOT_SET "MYSQLDUMP"
     exit 1;
  fi
  if [ -z ${SQL_PATH} ]; then
     show_message_log VAR_NOT_SET "SQL_PATH"
  fi
  if [ -z `getent passwd backup` ]; then
     show_message_log USER_NOT_FOUND "backup"
     exit 1;
  fi
  if [ -z `getent group backup` ]; then
     show_message_log GROUP_NOT_FOUND "backup"
     exit 1;
  fi
  # log
  if [ -z ${LOG_PATH} ]; then
     LOG_PATH="/var/log/mysql-db-backup"
  fi
  if ! [ -d ${LOG_PATH} ]; then
     install -d ${LOG_PATH}
     if [ -d ${LOG_PATH} ]; then
        show_message_log DIRECTORY_CREATED_AUTOMATICALLY ${LOG_PATH}
     else
        show_message_log FAILED_TO_CREATE_DIR ${LOG_PATH}
        exit 1;
     fi
  fi
  if ! [ -d ${SQL_PATH} ]; then
     install -d ${SQL_PATH}
     if [ -d ${SQL_PATH} ]; then
        show_message_log DIRECTORY_CREATED_AUTOMATICALLY ${SQL_PATH}
     else
        show_message_log FAILED_TO_CREATE_DIR ${SQL_PATH}
        exit 1;
     fi
  fi
  if [ "backup" != `ls -dl ${SQL_PATH} | cut -d" " -f 3` ]; then
     show_message_log INVALID_PERMISSIONS ${SQL_PATH}
     exit 1;
  fi

}

#=======================================
# Убрать из лога color scheme
# Strip escape codes/sequences [$1: input, $2: target variable]
function strip_escape_codes() {
   local input="${1//\"/\\\"}" output="" i char within_code=0
   for ((i=0; i < ${#input}; ++i)); do
       # get current character
       char="${input:i:1}"
       # if we're currently within an escape code, check if end of
       if (( ${within_code} == 1 )); then
          # code is reached, i.e. if current character is a letter
       case "${char}" in
          [a-zA-Z]) within_code=0 ;;
          # we're no longer within an escape code
       esac
          continue
       fi
       # if current character is '\e', we've reached an escape code
       if [[ "${char}" == $'\e' ]]; then
          # now we're within an escape code
          within_code=1
          continue
       fi
       # if none of the above applies, add current character to output
       output+="${char}"
   done
   # assign output to target variable
   eval "$2=\"${output}\""
}

#=======================================
echo_log(){
  if ! [ -d ${LOG_PATH} ]; then
     mkdir ${LOG_PATH}
  fi
  strip_escape_codes "$*" stripped
  echo "$(date +%H:%M:%S): $stripped" >> ${LOG_PATH}/$(date +%Y.%m.%d)-${BASE_NAME}.log
  echo -e $*
}

#=======================================
show_message_log(){
  if ! [ -d ${LOG_PATH} ]; then
     mkdir ${LOG_PATH}
  fi
  strip_escape_codes "$(show_message $*)" stripped
  echo "$(date +%H:%M:%S): $stripped" >> ${LOG_PATH}/$(date +%Y.%m.%d)-${BASE_NAME}.log
  show_message $*
}

#========================
delete_old_backups(){
  find ${SQL_PATH} -type f -mtime +${DAYS_KEEP_ARC} -exec rm -f {} \;
}

#========================
delete_old_logs(){
  find ${LOG_PATH} -type f -mtime +${DAYS_KEEP_LOG} -exec rm -f {} \;
}

#========================
get_files() {
   local PATH_FILE=$1
   local MASK_FILE=$2
   cd ${PATH_FILE}
   local F_LIST=
   for file in ${MASK_FILE}; do
      F_LIST="${F_LIST} ${file}"
   done
   echo "${F_LIST}"
}

#========================
backup_mysql(){
  FILE_LIST=`echo $(get_files "/etc/mysql-db-backup/hosts" "*.conf")`;
  TIME=$(date +%H_%M_%S)
  if [ -z ${_HOST} ]; then
     for file in ${FILE_LIST[@]}; do
        source "/etc/mysql-db-backup/hosts/${file}"
        if [ -z ${HOST} ]; then
           show_message_log VAR_NOT_SET "HOST"
           exit 1;
        fi
        if [ -z ${LOGIN} ]; then
           show_message_log VAR_NOT_SET "LOGIN"
           exit 1;
        fi
        if [ -z ${PASSWORD} ]; then
           show_message_log VAR_NOT_SET "PASSWORD"
           exit 1;
        fi
        # get a list of all bases
        databases=(`mysql -h ${HOST} -q -u${LOGIN} -p${PASSWORD} -B -N -e "SHOW DATABASES";`)
        if [ "$?" != 0 ]; then
           show_message_log FAILED_LIST_DATABASES ${HOST}
           continue
        fi
        # create backup of all bases
        for database in "${databases[@]}"; do
           if [ ${database} == "information_schema" -o ${database} == "performance_schema" ]; then
              continue
           fi
           show_message_log MYSQL_BACKUP_DATABASE "${HOST}->${database}"
           ${MYSQLDUMP} -h ${HOST} -q -u${LOGIN} -p${PASSWORD} ${database} > ${SQL_PATH}/${HOST}-${database}.sql
           if [ "$?" != 0 ]; then
              show_message_log ERROR_CREATING_BACKUP ${database}
              continue
           fi
           # squeeze the SQL file
           gzip -9 -c ${SQL_PATH}/${HOST}-${database}.sql > ${SQL_PATH}/${DATE}-${TIME}-${HOST}-${database}.sql.gz
           if [ "$?" != 0 ]; then
              show_message_log FAILED_COMPRESS_FILE ${HOST}-${database}.sql
              continue
           fi
           # delete the SQL file
           rm -f ${SQL_PATH}/${HOST}-${database}.sql
        done
     done
   else
     local FIND_HOST=0
     for file in ${FILE_LIST[@]}; do
        source "/etc/mysql-db-backup/hosts/${file}"
        if [ ${HOST} == ${_HOST} ]; then
           FIND_HOST=1
           break;
        fi
     done
     if [ ${FIND_HOST} = 0 ]; then
        show_message_log NOT_FOUND_CONFIG "${_HOST}"
        exit 1;
     fi
     if [ -z ${LOGIN} ]; then
        show_message_log VAR_NOT_SET "LOGIN"
        exit 1;
     fi
     if [ -z ${PASSWORD} ]; then
        show_message_log VAR_NOT_SET "PASSWORD"
        exit 1;
     fi
     if [ -z "${_DATABASES}" ]; then
        # get a list of all bases
        databases=(`mysql -h ${_HOST} -q -u${LOGIN} -p${PASSWORD} -B -N -e "SHOW DATABASES";`)
        if [ "$?" != 0 ]; then
           show_message_log FAILED_LIST_DATABASES ${_HOST}
           continue
        fi
        # create backup of all bases
        for database in "${databases[@]}"; do
           if [ ${database} == "information_schema" -o ${database} == "performance_schema" ]; then
              continue
           fi
           show_message_log MYSQL_BACKUP_DATABASE "${_HOST}->${database}"
           ${MYSQLDUMP} -h ${_HOST} -q -u${LOGIN} -p${PASSWORD} ${database} > ${SQL_PATH}/${_HOST}-${database}.sql
           if [ "$?" != 0 ]; then
              show_message_log ERROR_CREATING_BACKUP ${database}
              continue
           fi
           # squeeze the SQL file
           gzip -9 -c ${SQL_PATH}/${_HOST}-${database}.sql > ${SQL_PATH}/${DATE}-${TIME}-${_HOST}-${database}.sql.gz
           if [ "$?" != 0 ]; then
              show_message_log FAILED_COMPRESS_FILE ${HOST}-${database}.sql
              continue
           fi
           # delete the SQL file
           rm -f ${SQL_PATH}/${_HOST}-${database}.sql
        done
      else
        show_message_log MYSQL_BACKUP_DATABASE "${_HOST}->${_DATABASES}"
        ${MYSQLDUMP} -h ${_HOST} -q -u${LOGIN} -p${PASSWORD} ${_DATABASES} > ${SQL_PATH}/${_HOST}-${_DATABASES}.sql
        if [ "$?" != 0 ]; then
           show_message_log ERROR_CREATING_BACKUP ${_DATABASES}
           continue
        fi
        # squeeze the SQL file
        gzip -9 -c ${SQL_PATH}/${_HOST}-${_DATABASES}.sql > ${SQL_PATH}/${DATE}-${TIME}-${_HOST}-${_DATABASES}.sql.gz
        if [ "$?" != 0 ]; then
           show_message_log FAILED_COMPRESS_FILE ${HOST}-${database}.sql
           continue
        fi
        # delete the SQL file
        rm -f ${SQL_PATH}/${_HOST}-${_DATABASES}.sql
      fi
   fi
   if ! [ -z "${SEND_LOG_EMAIL}" ]; then
      if [ "${SEND_LOG_EMAIL}" = "1" ]; then
         _LOG_MAIL=1
      fi
   fi
   if [ ${_LOG_MAIL} = 1 ]; then
      which "smail" > /dev/null 2>&1
      if [ "$?" != 0 ]; then
         show_message_log NOT_INSTALLED "smail"
         exit 1
      fi
      if [ -z "${FROM_ADDRESS}" ]; then
         show_message_log VAR_NOT_SET "FROM_ADDRESS"
         exit 1;
      fi
      if [ -z "${TO_ADDRESS}" ]; then
         show_message_log VAR_NOT_SET "TO_ADDRESS"
         exit 1;
      fi
      if [ -z "${SUBJECT}" ]; then
         show_message_log VAR_NOT_SET "SUBJECT"
         exit 1;
      fi
      sudo smail -f=${FROM_ADDRESS} -t=${TO_ADDRESS} -s=${SUBJECT} -r=Admin -m=${LOG_PATH}/$(date +%Y.%m.%d)-${BASE_NAME}.log
      if [ "$?" != 0 ]; then
         show_message_log FAILED_SEND_EMAIL
         exit 1
      fi
   fi
}

#========================
set_options(){
  while [ "$1" ]; do
        case $1 in
             -v)
                show_message CURRENT_VERSION
                exit 0
                ;;
             --help)
                show_message SHOW_USAGE
                exit 0
                ;;
             -h=*)
              _HOST=$(echo "$1" | sed 's/-h=//')
                ;;
             -b=*)
              _DATABASES=$(echo "$1" | sed 's/-b=//')
               ;;
             -m)
              _LOG_MAIL=1
               ;;
             *) show_message UNKNOWN_ARG $1
                exit 1
               ;;
        esac
        shift
  done

}

#=======================================
ping_server() {
  show_message PING_SERVER ${SERVER_SSH}
  res=1
  /bin/ping ${SERVER_SSH} -c 3 > /dev/null 2>&1 && res=0
  if [ ${res} -ne 0 ]; then
     show_message NOT_ACCESS_SERVER $SERVER_SSH
     exit 1
  else
     show_message OK
  fi
}

#Loading message file
if [ -f "${PO_DIR}/${BASE_NAME}.messages" ]; then
   . "${PO_DIR}/${BASE_NAME}.messages"
else
   case $lang in
      ru) echo -e "\e[31mОшибка:\e[0m не найден файл ${BASE_NAME}.messages в '${PO_DIR}'!!!";;
      uk) echo -e "\e[31mПомилка:\e[0m не знайдений файл ${BASE_NAME}.messages у '${PO_DIR}'!!!";;
      *)  echo -e "\e[31mError:\e[0m file ${BASE_NAME}.messages not found in '${PO_DIR}'!!!";;
   esac
      exit 1
fi

if ! [ -f $CONFIG_FILE ]; then
   show_message NOT_FOUND_CONFIG $CONFIG_FILE
   exit 1
else
   source "$CONFIG_FILE"
   check_configuration
fi
